version: "3.7"

volumes:
  postgres_data: {}

networks:
  proxy:
    driver: bridge

services:
  postgres:
    image: postgis/postgis:14-3.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cycling_buddies
    ports:
      - "5432:5432"

  oidc:
    image: soluto/oidc-server-mock
    container_name: oidc
    environment:
      ASPNETCORE_URLS: https://+:443;http://+8-
      ASPNETCORE_HTTPS_PORT: 443
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aireframe-oidc-mock.pfx
      USERS_CONFIGURATION_PATH: /tmp/config/users.json
      CLIENTS_CONFIGURATION_PATH: /tmp/config/clients.json
      API_SCOPES_PATH: /tmp/config/api-scopes.json
      API_RESOURCES_PATH: /tmp/config/api-resources.json
      SERVER_OPTIONS_INLINE: |
        {
          "IssuerUri": "https://oidc.localhost",
        }
    volumes:
      - ./mocks/oidc:/tmp/config:ro
      - ~/.aspnet/https:/https:ro
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.oidc.tls=true
      - traefik.http.routers.oidc.rule=Host("oidc.localhost")
      - traefik.frontend.rule=Host:oidc.localhost
      - "traefik.http.services.oidc.loadbalancer.server.port=443"
      - "traefik.http.services.oidc.loadbalancer.server.scheme=https"

  traefik:
    image: traefik:v2.6
    ports:
      - 80:80
      - 443:443
      - "8080:8080"
    restart: always
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./docker/traefik/dynamic_conf.yaml:/etc/traefik/dynamic_conf.yaml:ro
      - ./docker/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./certs:/etc/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      proxy:
        aliases:
          - oidc.localhost

  im-db:
    image: postgres:14-alpine
    networks:
      - proxy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: im
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
      LC_COLLATE: 'C'
      LC_CTYPE: 'C'

  im-server:
    container_name: im-server
    build:
      context: .
      dockerfile: ./docker/Synapse/Dockerfile
    environment:
      - SYNAPSE_SERVER_NAME=localhost
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./matrix:/data
    ports:
      - 8008:8008
    depends_on:
      - im-db
